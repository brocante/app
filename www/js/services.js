angular.module('starter.services', [])

    .factory('DB', function() {
        var positions = new GeoFire(new Firebase('https://donner-a-lyon.firebaseio.com/positions'));
        var removedPositions = new GeoFire(new Firebase('https://donner-a-lyon.firebaseio.com/removedPositions'));
        var products = new Firebase('https://donner-a-lyon.firebaseio.com/products');
        var removedProducts = new Firebase('https://donner-a-lyon.firebaseio.com/removedProducts');
        var users = new Firebase('https://donner-a-lyon.firebaseio.com/users');
        var main = new Firebase('https://donner-a-lyon.firebaseio.com/');

        return {
            positions       : positions,
            removedPositions: removedPositions,
            products        : products,
            removedProducts : removedProducts,
            users           : users,
            main            : main
        };
    })

    .factory('Auth', function(DB, $firebaseAuth) {
        return $firebaseAuth(DB.main);
    })

    .factory('Products', function($firebase, DB, $rootScope) {
        var factory = {};

        factory.getByLocation = function(coords) {
            var results = [];

            var query = DB.positions.query({
                center: [coords.latitude, coords.longitude],
                radius: 20
            });

            query.on('key_entered', function(key, location, distance) {
                var item = {
                    key     : key,
                    location: location,
                    distance: distance,
                    object  : {
                        priority: 0
                    }
                };

                DB.products.child(key).once('value', function(productSnap) {
                    item.object = productSnap.val();
                    if(item.object) {
                        item.object.priority = productSnap.getPriority() || 0;
                    }
                    $rootScope.$digest();
                });

                results.push(item);

                $rootScope.$digest();
            });

            query.on('key_exited', function(key) {
                _.remove(results, function(item) {
                    return item.key === key;
                });
                $rootScope.$digest();
            });

            query.on('key_moved', function(key, location, distance) {
                var item = _.find(results, function(item) {
                    return item.key === key;
                });

                item.location = location;
                item.distance = distance;
                $rootScope.$digest();
            });

            return results;
        };

        factory.getById = function(productId) {
            return $firebase(DB.products.child(productId)).$asObject();
        };

        return factory;
    })


    .factory('Location', function($q, $cordovaGeolocation, $ionicPlatform) {
        var factory = {};

        var posOptions = {
            timeout           : 10000,
            enableHighAccuracy: false
        };

        factory.currentPosition = {};

        var alreadyLocated = $q.defer();

        factory.update = function() {
            var deferred = $q.defer();

            $ionicPlatform.ready(function() {
                $cordovaGeolocation.getCurrentPosition(posOptions).then(function(position) {

                    factory.currentPosition = position.coords;
                    factory.isSet = true;
                    deferred.resolve(factory.currentPosition);
                    alreadyLocated.resolve();
                }, function() {
                    console.log('Location error - LocationProvider');
                });
            });

            return deferred.promise;
        };

        factory.locate = function() {
            return alreadyLocated.promise;
        };

        return factory;
    })


    .factory('Backend', function($q, $ionicPlatform, DB, Location, $rootScope) {
        var factory = {};

        var server = 'https://intense-river-1362.herokuapp.com/upload';// Heroku
        //var server = 'http://192.168.0.24:9000/upload';// Yann
        //var server = 'http://192.168.180.33:9000/upload';// Toon

        var Store = function(localPath) {
            var deferred = $q.defer();

            $ionicPlatform.ready(function() {

                var ft = new FileTransfer(),
                    options = new FileUploadOptions();

                options.fileKey = "file";
                options.fileName = localPath.split("/").pop(); // We will use the name auto-generated by Node at the server side.
                options.mimeType = "image/jpeg";
                options.chunkedMode = false;

                ft.upload(localPath, server, function(data) {
                    deferred.resolve(JSON.parse(data.response).path);
                }, function() {
                    deferred.reject();
                    alert("L'envoi a échoué");
                }, options);
            });

            return deferred.promise;
        };

        factory.removeProduct = function(product) {

            // TODO please...
            DB.products.child(product.key).once('value', function(snap) {
                var currentKey = product.key;
                var currentProduct = snap.val();

                DB.positions.get(currentKey).then(function(currentLocation) {

                    DB.positions.remove(currentKey).then(function() {
                        DB.removedPositions.set(currentKey, currentLocation).then(function() {
                            DB.products.child(product.key).remove(function() {
                                DB.removedProducts.child(currentKey).set(currentProduct, function() {
                                    DB.users.child($rootScope.currentUser.auth.uid + '/products/' + currentKey).remove(function() {
                                        DB.users.child($rootScope.currentUser.auth.uid + '/removedProducts/' + currentKey).set(true);
                                    });
                                });
                            });
                        });
                    });

                });
            });

        };

        factory.saveToFirebase = function(path) {
            var deferred = $q.defer();

            var id = path.split('/').pop().split('.')[0];

            var product = {
                imagePath: path,
                email    : $rootScope.currentUser.config.email,
                phone    : $rootScope.currentUser.config.phone,
                user     : $rootScope.currentUser.auth.uid,
                addDate  : new Date().getTime()
            };

            Location.locate().then(function() {
                var position = [Location.currentPosition.latitude, Location.currentPosition.longitude];

                var now = (new Date()).getTime();

                // Save product
                console.log('SAVE PRODUCT', id);
                DB.products.child(id).setWithPriority(product, now, function(err) {
                    if(!err) {
                        console.log('PRODUCT SAVED');

                        console.log('SAVE POSITION');
                        // Save geolocation
                        DB.positions.set(id, position).then(function() {
                            console.log('POSITION SAVED');

                            console.log('ADD PRODUCT TO USER');
                            DB.users.child($rootScope.currentUser.auth.uid + '/products/' + id).set(true, function(err) {
                                if(err) {
                                    deferred.reject();
                                    console.log('ADD PRODUCT TO USER ERROR');
                                } else {
                                    console.log('PRODUCT ADDED TO USER');
                                    deferred.resolve();
                                }

                            });
                        }, function() {
                            console.log('POSITION ERROR');
                            deferred.reject();
                        });
                    } else {
                        deferred.reject();
                    }
                });
            });

            return deferred.promise;
        };

        factory.uploadPicture = Store;

        return factory;
    })


    .factory('Camera', function($cordovaCamera, $q) {
        var factory = {};

        var popover = new CameraPopoverOptions(0, 0, 320, 320, Camera.PopoverArrowDirection.ARROW_ANY);

        var defaultConfig = {
            quality         : 75,
            destinationType : Camera.DestinationType.FILE_URI,
            allowEdit       : true,
            encodingType    : Camera.EncodingType.JPEG,
            targetWidth     : 320,
            targetHeight    : 320,
            saveToPhotoAlbum: false,
            popoverOptions  : popover

        };

        factory.choosePicture = function() {
            var deferred = $q.defer();

            if(angular.isDefined(window.Camera)) {
                var options = angular.extend({}, defaultConfig, {
                    sourceType: Camera.PictureSourceType.PHOTOLIBRARY
                });

                //navigator.camera.getPicture(deferred.resolve, deferred.reject, options);
                $cordovaCamera.getPicture(options).then(deferred.resolve, deferred.reject);
            } else {
                deferred.reject();
            }

            return deferred.promise;
        };

        factory.takePicture = function() {
            var deferred = $q.defer();

            if(angular.isDefined(window.Camera)) {
                var options = angular.extend({}, defaultConfig, {
                    sourceType: Camera.PictureSourceType.CAMERA
                });

                //navigator.camera.getPicture(deferred.resolve, deferred.reject, options);
                $cordovaCamera.getPicture(options).then(deferred.resolve, deferred.reject);
            } else {
                deferred.reject();
            }

            return deferred.promise;
        };

        return factory;
    });
